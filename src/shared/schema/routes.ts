/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: '/'}`
  },
  "/favorites": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/favorites`
  },
  "/funds": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/funds`
  },
  "/funds/withdraw": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/funds/withdraw`
  },
  "/lots": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/lots`
  },
  "/lots/create": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]), gameId?: (string), gameSection?: (string) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/lots/create${appendSp({ gameId: params?.gameId, gameSection: params?.gameSection })}`
  },
  "/messages": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/messages`
  },
  "/order/create/[lotId]": (params: { lotId: (string | number), locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/order/create/${params.lotId}`
  },
  "/order/purchases": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/order/purchases`
  },
  "/order/purchases/[orderId]": (params: { orderId: (string | number), locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/order/purchases/${params.orderId}`
  },
  "/order/sales": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/order/sales`
  },
  "/referral": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/referral`
  },
  "/settings/notifications": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/settings/notifications`
  },
  "/settings/reviews": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/settings/reviews`
  },
  "/settings/security": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/settings/security`
  },
  "/settings/settings": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/settings/settings`
  },
  "/settings/subscription": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/settings/subscription`
  },
  "/about": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/about`
  },
  "/ai-assistant": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/ai-assistant`
  },
  "/blog": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/blog`
  },
  "/feedback": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/feedback`
  },
  "/g/[gameId]": (params: { gameId: (string | number), locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]), gameSection?: (Parameters<typeof import('../../params/gameSection.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/g/${params.gameId}${params?.gameSection ? `/${params?.gameSection}`: ''}`
  },
  "/help/account": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/account`
  },
  "/help/affiliate": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/affiliate`
  },
  "/help/ai-assistant": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/ai-assistant`
  },
  "/help/delivery": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/delivery`
  },
  "/help/general": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/general`
  },
  "/help/payment": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/payment`
  },
  "/help/rating": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/rating`
  },
  "/help/security": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/security`
  },
  "/help/sellers": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/sellers`
  },
  "/help/technical": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/help/technical`
  },
  "/job": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/job`
  },
  "/policy/agreement": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/policy/agreement`
  },
  "/policy/license": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/policy/license`
  },
  "/policy/privacy": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/policy/privacy`
  },
  "/promotions": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/promotions`
  },
  "/top-10": (params?: { locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/top-10`
  },
  "/u/[userId]/reviews": (params: { userId: (string | number), locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/u/${params.userId}/reviews`
  },
  "/u/[userId]/storefront": (params: { userId: (string | number), locale?: (Parameters<typeof import('../../params/locale.ts').match>[0]) }) => {
    return `${params?.locale ? `/${params?.locale}`: ''}/u/${params.userId}/storefront`
  }
}

/**
 * SERVERS
 */
const SERVERS = {
  
}

/**
 * ACTIONS
 */
const ACTIONS = {
  
}

/**
 * LINKS
 */
const LINKS = {
  "copyright": `https://creativecommons.org/licenses/by-nc/3.0`,
  "discord": `https://discord.gg/dTzhKUSb3y`,
  "facebook": `https://facebook.com/GameValues`,
  "instagram": `https://www.instagram.com/gamevalues`,
  "telegramChat": `https://t.me/gamevalues_chat`,
  "telegramNews": `https://t.me/gamevalues_news`,
  "twitch": `https://www.twitch.tv/gamevalues`,
  "youtube": `https://www.youtube.com/channel/UCLVw1bjWVYUjRW8oBFpwx8Q`
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  for (const [name, val] of Object.entries(sp)) {
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted) {
    return `${prefix}${formatted}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

function StringOrUndefined(val: any) {
  if (val === undefined) {
    return undefined
  }

  return String(val)
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': 'locale', '/favorites': 'locale', '/funds': 'locale', '/funds/withdraw': 'locale', '/lots': 'locale', '/lots/create': 'locale', '/messages': 'locale', '/order/create/[lotId]': 'lotId' | 'locale', '/order/purchases': 'locale', '/order/purchases/[orderId]': 'orderId' | 'locale', '/order/sales': 'locale', '/referral': 'locale', '/settings/notifications': 'locale', '/settings/reviews': 'locale', '/settings/security': 'locale', '/settings/settings': 'locale', '/settings/subscription': 'locale', '/about': 'locale', '/ai-assistant': 'locale', '/blog': 'locale', '/feedback': 'locale', '/g/[gameId]': 'gameId' | 'locale' | 'gameSection', '/help/account': 'locale', '/help/affiliate': 'locale', '/help/ai-assistant': 'locale', '/help/delivery': 'locale', '/help/general': 'locale', '/help/payment': 'locale', '/help/rating': 'locale', '/help/security': 'locale', '/help/sellers': 'locale', '/help/technical': 'locale', '/job': 'locale', '/policy/agreement': 'locale', '/policy/license': 'locale', '/policy/privacy': 'locale', '/promotions': 'locale', '/top-10': 'locale', '/u/[userId]/reviews': 'userId' | 'locale', '/u/[userId]/storefront': 'userId' | 'locale' }
  SERVERS: Record<string, never>
  ACTIONS: Record<string, never>
  LINKS: { 'copyright': never, 'discord': never, 'facebook': never, 'instagram': never, 'telegramChat': never, 'telegramNews': never, 'twitch': never, 'youtube': never }
  Params: { locale: never, gameId: never, gameSection: never, lotId: never, orderId: never, userId: never }
}
